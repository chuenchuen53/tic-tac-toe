import TicTacToe from "../TicTacToe";
import { TicTacToeElement } from "../typing";
import type { SimulationCase } from "./constant";

function getInputArr(simulationCase: SimulationCase): number[][] {
  if (simulationCase === "empty") return [];

  const oneDIndex = simulationCase.match(/\d/g) || [];
  const twoDIndex = oneDIndex.map((index) => [Math.floor(Number(index) / 3), Number(index) % 3]);
  return twoDIndex;
}

export const boardStrMap: Record<SimulationCase, string> = {
  empty: "EEE-EEE-EEE",
  fill_x0: "XEE-EEE-EEE",
  fill_x1: "EXE-EEE-EEE",
  fill_x2: "EEX-EEE-EEE",
  fill_x3: "EEE-XEE-EEE",
  fill_x4: "EEE-EXE-EEE",
  fill_x5: "EEE-EEX-EEE",
  fill_x6: "EEE-EEE-XEE",
  fill_x7: "EEE-EEE-EXE",
  fill_x8: "EEE-EEE-EEX",
  fill_x0_o1: "XOE-EEE-EEE",
  fill_x0_o2: "XEO-EEE-EEE",
  fill_x0_o3: "XEE-OEE-EEE",
  fill_x0_o4: "XEE-EOE-EEE",
  fill_x0_o5: "XEE-EEO-EEE",
  fill_x0_o6: "XEE-EEE-OEE",
  fill_x0_o7: "XEE-EEE-EOE",
  fill_x0_o8: "XEE-EEE-EEO",
  fill_x1_o0: "OXE-EEE-EEE",
  fill_x1_o2: "EXO-EEE-EEE",
  fill_x1_o3: "EXE-OEE-EEE",
  fill_x1_o4: "EXE-EOE-EEE",
  fill_x1_o5: "EXE-EEO-EEE",
  fill_x1_o6: "EXE-EEE-OEE",
  fill_x1_o7: "EXE-EEE-EOE",
  fill_x1_o8: "EXE-EEE-EEO",
  fill_x2_o0: "OEX-EEE-EEE",
  fill_x2_o1: "EOX-EEE-EEE",
  fill_x2_o3: "EEX-OEE-EEE",
  fill_x2_o4: "EEX-EOE-EEE",
  fill_x2_o5: "EEX-EEO-EEE",
  fill_x2_o6: "EEX-EEE-OEE",
  fill_x2_o7: "EEX-EEE-EOE",
  fill_x2_o8: "EEX-EEE-EEO",
  fill_x3_o0: "OEE-XEE-EEE",
  fill_x3_o1: "EOE-XEE-EEE",
  fill_x3_o2: "EEO-XEE-EEE",
  fill_x3_o4: "EEE-XOE-EEE",
  fill_x3_o5: "EEE-XEO-EEE",
  fill_x3_o6: "EEE-XEE-OEE",
  fill_x3_o7: "EEE-XEE-EOE",
  fill_x3_o8: "EEE-XEE-EEO",
  fill_x4_o0: "OEE-EXE-EEE",
  fill_x4_o1: "EOE-EXE-EEE",
  fill_x4_o2: "EEO-EXE-EEE",
  fill_x4_o3: "EEE-OXE-EEE",
  fill_x4_o5: "EEE-EXO-EEE",
  fill_x4_o6: "EEE-EXE-OEE",
  fill_x4_o7: "EEE-EXE-EOE",
  fill_x4_o8: "EEE-EXE-EEO",
  fill_x5_o0: "OEE-EEX-EEE",
  fill_x5_o1: "EOE-EEX-EEE",
  fill_x5_o2: "EEO-EEX-EEE",
  fill_x5_o3: "EEE-OEX-EEE",
  fill_x5_o4: "EEE-EOX-EEE",
  fill_x5_o6: "EEE-EEX-OEE",
  fill_x5_o7: "EEE-EEX-EOE",
  fill_x5_o8: "EEE-EEX-EEO",
  fill_x6_o0: "OEE-EEE-XEE",
  fill_x6_o1: "EOE-EEE-XEE",
  fill_x6_o2: "EEO-EEE-XEE",
  fill_x6_o3: "EEE-OEE-XEE",
  fill_x6_o4: "EEE-EOE-XEE",
  fill_x6_o5: "EEE-EEO-XEE",
  fill_x6_o7: "EEE-EEE-XOE",
  fill_x6_o8: "EEE-EEE-XEO",
  fill_x7_o0: "OEE-EEE-EXE",
  fill_x7_o1: "EOE-EEE-EXE",
  fill_x7_o2: "EEO-EEE-EXE",
  fill_x7_o3: "EEE-OEE-EXE",
  fill_x7_o4: "EEE-EOE-EXE",
  fill_x7_o5: "EEE-EEO-EXE",
  fill_x7_o6: "EEE-EEE-OXE",
  fill_x7_o8: "EEE-EEE-EXO",
  fill_x8_o0: "OEE-EEE-EEX",
  fill_x8_o1: "EOE-EEE-EEX",
  fill_x8_o2: "EEO-EEE-EEX",
  fill_x8_o3: "EEE-OEE-EEX",
  fill_x8_o4: "EEE-EOE-EEX",
  fill_x8_o5: "EEE-EEO-EEX",
  fill_x8_o6: "EEE-EEE-OEX",
  fill_x8_o7: "EEE-EEE-EOX",
  fill_x0_o1_x2: "XOX-EEE-EEE",
  fill_x0_o1_x3: "XOE-XEE-EEE",
  fill_x0_o1_x4: "XOE-EXE-EEE",
  fill_x0_o1_x5: "XOE-EEX-EEE",
  fill_x0_o1_x6: "XOE-EEE-XEE",
  fill_x0_o1_x7: "XOE-EEE-EXE",
  fill_x0_o1_x8: "XOE-EEE-EEX",
  fill_x0_o2_x1: "XXO-EEE-EEE",
  fill_x0_o2_x3: "XEO-XEE-EEE",
  fill_x0_o2_x4: "XEO-EXE-EEE",
  fill_x0_o2_x5: "XEO-EEX-EEE",
  fill_x0_o2_x6: "XEO-EEE-XEE",
  fill_x0_o2_x7: "XEO-EEE-EXE",
  fill_x0_o2_x8: "XEO-EEE-EEX",
  fill_x0_o3_x1: "XXE-OEE-EEE",
  fill_x0_o3_x2: "XEX-OEE-EEE",
  fill_x0_o3_x4: "XEE-OXE-EEE",
  fill_x0_o3_x5: "XEE-OEX-EEE",
  fill_x0_o3_x6: "XEE-OEE-XEE",
  fill_x0_o3_x7: "XEE-OEE-EXE",
  fill_x0_o3_x8: "XEE-OEE-EEX",
  fill_x0_o4_x1: "XXE-EOE-EEE",
  fill_x0_o4_x2: "XEX-EOE-EEE",
  fill_x0_o4_x3: "XEE-XOE-EEE",
  fill_x0_o4_x5: "XEE-EOX-EEE",
  fill_x0_o4_x6: "XEE-EOE-XEE",
  fill_x0_o4_x7: "XEE-EOE-EXE",
  fill_x0_o4_x8: "XEE-EOE-EEX",
  fill_x0_o5_x1: "XXE-EEO-EEE",
  fill_x0_o5_x2: "XEX-EEO-EEE",
  fill_x0_o5_x3: "XEE-XEO-EEE",
  fill_x0_o5_x4: "XEE-EXO-EEE",
  fill_x0_o5_x6: "XEE-EEO-XEE",
  fill_x0_o5_x7: "XEE-EEO-EXE",
  fill_x0_o5_x8: "XEE-EEO-EEX",
  fill_x0_o6_x1: "XXE-EEE-OEE",
  fill_x0_o6_x2: "XEX-EEE-OEE",
  fill_x0_o6_x3: "XEE-XEE-OEE",
  fill_x0_o6_x4: "XEE-EXE-OEE",
  fill_x0_o6_x5: "XEE-EEX-OEE",
  fill_x0_o6_x7: "XEE-EEE-OXE",
  fill_x0_o6_x8: "XEE-EEE-OEX",
  fill_x0_o7_x1: "XXE-EEE-EOE",
  fill_x0_o7_x2: "XEX-EEE-EOE",
  fill_x0_o7_x3: "XEE-XEE-EOE",
  fill_x0_o7_x4: "XEE-EXE-EOE",
  fill_x0_o7_x5: "XEE-EEX-EOE",
  fill_x0_o7_x6: "XEE-EEE-XOE",
  fill_x0_o7_x8: "XEE-EEE-EOX",
  fill_x0_o8_x1: "XXE-EEE-EEO",
  fill_x0_o8_x2: "XEX-EEE-EEO",
  fill_x0_o8_x3: "XEE-XEE-EEO",
  fill_x0_o8_x4: "XEE-EXE-EEO",
  fill_x0_o8_x5: "XEE-EEX-EEO",
  fill_x0_o8_x6: "XEE-EEE-XEO",
  fill_x0_o8_x7: "XEE-EEE-EXO",
  fill_x1_o0_x2: "OXX-EEE-EEE",
  fill_x1_o0_x3: "OXE-XEE-EEE",
  fill_x1_o0_x4: "OXE-EXE-EEE",
  fill_x1_o0_x5: "OXE-EEX-EEE",
  fill_x1_o0_x6: "OXE-EEE-XEE",
  fill_x1_o0_x7: "OXE-EEE-EXE",
  fill_x1_o0_x8: "OXE-EEE-EEX",
  fill_x1_o2_x3: "EXO-XEE-EEE",
  fill_x1_o2_x4: "EXO-EXE-EEE",
  fill_x1_o2_x5: "EXO-EEX-EEE",
  fill_x1_o2_x6: "EXO-EEE-XEE",
  fill_x1_o2_x7: "EXO-EEE-EXE",
  fill_x1_o2_x8: "EXO-EEE-EEX",
  fill_x1_o3_x2: "EXX-OEE-EEE",
  fill_x1_o3_x4: "EXE-OXE-EEE",
  fill_x1_o3_x5: "EXE-OEX-EEE",
  fill_x1_o3_x6: "EXE-OEE-XEE",
  fill_x1_o3_x7: "EXE-OEE-EXE",
  fill_x1_o3_x8: "EXE-OEE-EEX",
  fill_x1_o4_x2: "EXX-EOE-EEE",
  fill_x1_o4_x3: "EXE-XOE-EEE",
  fill_x1_o4_x5: "EXE-EOX-EEE",
  fill_x1_o4_x6: "EXE-EOE-XEE",
  fill_x1_o4_x7: "EXE-EOE-EXE",
  fill_x1_o4_x8: "EXE-EOE-EEX",
  fill_x1_o5_x2: "EXX-EEO-EEE",
  fill_x1_o5_x3: "EXE-XEO-EEE",
  fill_x1_o5_x4: "EXE-EXO-EEE",
  fill_x1_o5_x6: "EXE-EEO-XEE",
  fill_x1_o5_x7: "EXE-EEO-EXE",
  fill_x1_o5_x8: "EXE-EEO-EEX",
  fill_x1_o6_x2: "EXX-EEE-OEE",
  fill_x1_o6_x3: "EXE-XEE-OEE",
  fill_x1_o6_x4: "EXE-EXE-OEE",
  fill_x1_o6_x5: "EXE-EEX-OEE",
  fill_x1_o6_x7: "EXE-EEE-OXE",
  fill_x1_o6_x8: "EXE-EEE-OEX",
  fill_x1_o7_x2: "EXX-EEE-EOE",
  fill_x1_o7_x3: "EXE-XEE-EOE",
  fill_x1_o7_x4: "EXE-EXE-EOE",
  fill_x1_o7_x5: "EXE-EEX-EOE",
  fill_x1_o7_x6: "EXE-EEE-XOE",
  fill_x1_o7_x8: "EXE-EEE-EOX",
  fill_x1_o8_x2: "EXX-EEE-EEO",
  fill_x1_o8_x3: "EXE-XEE-EEO",
  fill_x1_o8_x4: "EXE-EXE-EEO",
  fill_x1_o8_x5: "EXE-EEX-EEO",
  fill_x1_o8_x6: "EXE-EEE-XEO",
  fill_x1_o8_x7: "EXE-EEE-EXO",
  fill_x2_o0_x3: "OEX-XEE-EEE",
  fill_x2_o0_x4: "OEX-EXE-EEE",
  fill_x2_o0_x5: "OEX-EEX-EEE",
  fill_x2_o0_x6: "OEX-EEE-XEE",
  fill_x2_o0_x7: "OEX-EEE-EXE",
  fill_x2_o0_x8: "OEX-EEE-EEX",
  fill_x2_o1_x3: "EOX-XEE-EEE",
  fill_x2_o1_x4: "EOX-EXE-EEE",
  fill_x2_o1_x5: "EOX-EEX-EEE",
  fill_x2_o1_x6: "EOX-EEE-XEE",
  fill_x2_o1_x7: "EOX-EEE-EXE",
  fill_x2_o1_x8: "EOX-EEE-EEX",
  fill_x2_o3_x4: "EEX-OXE-EEE",
  fill_x2_o3_x5: "EEX-OEX-EEE",
  fill_x2_o3_x6: "EEX-OEE-XEE",
  fill_x2_o3_x7: "EEX-OEE-EXE",
  fill_x2_o3_x8: "EEX-OEE-EEX",
  fill_x2_o4_x3: "EEX-XOE-EEE",
  fill_x2_o4_x5: "EEX-EOX-EEE",
  fill_x2_o4_x6: "EEX-EOE-XEE",
  fill_x2_o4_x7: "EEX-EOE-EXE",
  fill_x2_o4_x8: "EEX-EOE-EEX",
  fill_x2_o5_x3: "EEX-XEO-EEE",
  fill_x2_o5_x4: "EEX-EXO-EEE",
  fill_x2_o5_x6: "EEX-EEO-XEE",
  fill_x2_o5_x7: "EEX-EEO-EXE",
  fill_x2_o5_x8: "EEX-EEO-EEX",
  fill_x2_o6_x3: "EEX-XEE-OEE",
  fill_x2_o6_x4: "EEX-EXE-OEE",
  fill_x2_o6_x5: "EEX-EEX-OEE",
  fill_x2_o6_x7: "EEX-EEE-OXE",
  fill_x2_o6_x8: "EEX-EEE-OEX",
  fill_x2_o7_x3: "EEX-XEE-EOE",
  fill_x2_o7_x4: "EEX-EXE-EOE",
  fill_x2_o7_x5: "EEX-EEX-EOE",
  fill_x2_o7_x6: "EEX-EEE-XOE",
  fill_x2_o7_x8: "EEX-EEE-EOX",
  fill_x2_o8_x3: "EEX-XEE-EEO",
  fill_x2_o8_x4: "EEX-EXE-EEO",
  fill_x2_o8_x5: "EEX-EEX-EEO",
  fill_x2_o8_x6: "EEX-EEE-XEO",
  fill_x2_o8_x7: "EEX-EEE-EXO",
  fill_x3_o0_x4: "OEE-XXE-EEE",
  fill_x3_o0_x5: "OEE-XEX-EEE",
  fill_x3_o0_x6: "OEE-XEE-XEE",
  fill_x3_o0_x7: "OEE-XEE-EXE",
  fill_x3_o0_x8: "OEE-XEE-EEX",
  fill_x3_o1_x4: "EOE-XXE-EEE",
  fill_x3_o1_x5: "EOE-XEX-EEE",
  fill_x3_o1_x6: "EOE-XEE-XEE",
  fill_x3_o1_x7: "EOE-XEE-EXE",
  fill_x3_o1_x8: "EOE-XEE-EEX",
  fill_x3_o2_x4: "EEO-XXE-EEE",
  fill_x3_o2_x5: "EEO-XEX-EEE",
  fill_x3_o2_x6: "EEO-XEE-XEE",
  fill_x3_o2_x7: "EEO-XEE-EXE",
  fill_x3_o2_x8: "EEO-XEE-EEX",
  fill_x3_o4_x5: "EEE-XOX-EEE",
  fill_x3_o4_x6: "EEE-XOE-XEE",
  fill_x3_o4_x7: "EEE-XOE-EXE",
  fill_x3_o4_x8: "EEE-XOE-EEX",
  fill_x3_o5_x4: "EEE-XXO-EEE",
  fill_x3_o5_x6: "EEE-XEO-XEE",
  fill_x3_o5_x7: "EEE-XEO-EXE",
  fill_x3_o5_x8: "EEE-XEO-EEX",
  fill_x3_o6_x4: "EEE-XXE-OEE",
  fill_x3_o6_x5: "EEE-XEX-OEE",
  fill_x3_o6_x7: "EEE-XEE-OXE",
  fill_x3_o6_x8: "EEE-XEE-OEX",
  fill_x3_o7_x4: "EEE-XXE-EOE",
  fill_x3_o7_x5: "EEE-XEX-EOE",
  fill_x3_o7_x6: "EEE-XEE-XOE",
  fill_x3_o7_x8: "EEE-XEE-EOX",
  fill_x3_o8_x4: "EEE-XXE-EEO",
  fill_x3_o8_x5: "EEE-XEX-EEO",
  fill_x3_o8_x6: "EEE-XEE-XEO",
  fill_x3_o8_x7: "EEE-XEE-EXO",
  fill_x4_o0_x5: "OEE-EXX-EEE",
  fill_x4_o0_x6: "OEE-EXE-XEE",
  fill_x4_o0_x7: "OEE-EXE-EXE",
  fill_x4_o0_x8: "OEE-EXE-EEX",
  fill_x4_o1_x5: "EOE-EXX-EEE",
  fill_x4_o1_x6: "EOE-EXE-XEE",
  fill_x4_o1_x7: "EOE-EXE-EXE",
  fill_x4_o1_x8: "EOE-EXE-EEX",
  fill_x4_o2_x5: "EEO-EXX-EEE",
  fill_x4_o2_x6: "EEO-EXE-XEE",
  fill_x4_o2_x7: "EEO-EXE-EXE",
  fill_x4_o2_x8: "EEO-EXE-EEX",
  fill_x4_o3_x5: "EEE-OXX-EEE",
  fill_x4_o3_x6: "EEE-OXE-XEE",
  fill_x4_o3_x7: "EEE-OXE-EXE",
  fill_x4_o3_x8: "EEE-OXE-EEX",
  fill_x4_o5_x6: "EEE-EXO-XEE",
  fill_x4_o5_x7: "EEE-EXO-EXE",
  fill_x4_o5_x8: "EEE-EXO-EEX",
  fill_x4_o6_x5: "EEE-EXX-OEE",
  fill_x4_o6_x7: "EEE-EXE-OXE",
  fill_x4_o6_x8: "EEE-EXE-OEX",
  fill_x4_o7_x5: "EEE-EXX-EOE",
  fill_x4_o7_x6: "EEE-EXE-XOE",
  fill_x4_o7_x8: "EEE-EXE-EOX",
  fill_x4_o8_x5: "EEE-EXX-EEO",
  fill_x4_o8_x6: "EEE-EXE-XEO",
  fill_x4_o8_x7: "EEE-EXE-EXO",
  fill_x5_o0_x6: "OEE-EEX-XEE",
  fill_x5_o0_x7: "OEE-EEX-EXE",
  fill_x5_o0_x8: "OEE-EEX-EEX",
  fill_x5_o1_x6: "EOE-EEX-XEE",
  fill_x5_o1_x7: "EOE-EEX-EXE",
  fill_x5_o1_x8: "EOE-EEX-EEX",
  fill_x5_o2_x6: "EEO-EEX-XEE",
  fill_x5_o2_x7: "EEO-EEX-EXE",
  fill_x5_o2_x8: "EEO-EEX-EEX",
  fill_x5_o3_x6: "EEE-OEX-XEE",
  fill_x5_o3_x7: "EEE-OEX-EXE",
  fill_x5_o3_x8: "EEE-OEX-EEX",
  fill_x5_o4_x6: "EEE-EOX-XEE",
  fill_x5_o4_x7: "EEE-EOX-EXE",
  fill_x5_o4_x8: "EEE-EOX-EEX",
  fill_x5_o6_x7: "EEE-EEX-OXE",
  fill_x5_o6_x8: "EEE-EEX-OEX",
  fill_x5_o7_x6: "EEE-EEX-XOE",
  fill_x5_o7_x8: "EEE-EEX-EOX",
  fill_x5_o8_x6: "EEE-EEX-XEO",
  fill_x5_o8_x7: "EEE-EEX-EXO",
  fill_x6_o0_x7: "OEE-EEE-XXE",
  fill_x6_o0_x8: "OEE-EEE-XEX",
  fill_x6_o1_x7: "EOE-EEE-XXE",
  fill_x6_o1_x8: "EOE-EEE-XEX",
  fill_x6_o2_x7: "EEO-EEE-XXE",
  fill_x6_o2_x8: "EEO-EEE-XEX",
  fill_x6_o3_x7: "EEE-OEE-XXE",
  fill_x6_o3_x8: "EEE-OEE-XEX",
  fill_x6_o4_x7: "EEE-EOE-XXE",
  fill_x6_o4_x8: "EEE-EOE-XEX",
  fill_x6_o5_x7: "EEE-EEO-XXE",
  fill_x6_o5_x8: "EEE-EEO-XEX",
  fill_x6_o7_x8: "EEE-EEE-XOX",
  fill_x6_o8_x7: "EEE-EEE-XXO",
  fill_x7_o0_x8: "OEE-EEE-EXX",
  fill_x7_o1_x8: "EOE-EEE-EXX",
  fill_x7_o2_x8: "EEO-EEE-EXX",
  fill_x7_o3_x8: "EEE-OEE-EXX",
  fill_x7_o4_x8: "EEE-EOE-EXX",
  fill_x7_o5_x8: "EEE-EEO-EXX",
  fill_x7_o6_x8: "EEE-EEE-OXX",
};

export function boardToStr(x: TicTacToe) {
  return x
    .getBoard()
    .map((row) => row.map((e) => (e === TicTacToeElement.X ? "X" : e === TicTacToeElement.O ? "O" : "E")).join(""))
    .join("-");
}

export function boardToStrInvertXO(x: TicTacToe) {
  return x
    .getBoard()
    .map((row) => row.map((e) => (e === TicTacToeElement.X ? "O" : e === TicTacToeElement.O ? "X" : "E")).join(""))
    .join("-");
}

export function getTicTacToe(simulationCase: SimulationCase): TicTacToe {
  const x = TicTacToeElement.X;
  let r = new TicTacToe(x);
  for (const [row, col] of getInputArr(simulationCase)) {
    r.input(row, col);
  }
  return r;
}

export function getMatchCase(ticTacToe: TicTacToe): SimulationCase | null {
  if (ticTacToe.getFilled() < 4) {
    if (ticTacToe.getStartTurn() === TicTacToeElement.X) {
      const str = boardToStr(ticTacToe);
      for (const [key, value] of Object.entries(boardStrMap)) {
        if (str === value) return key as SimulationCase;
      }
    } else {
      const invertStr = boardToStrInvertXO(ticTacToe);
      for (const [key, value] of Object.entries(boardStrMap)) {
        if (invertStr === value) return key as SimulationCase;
      }
    }
  }

  return null;
}
